{"version":3,"file":"static/js/TypeScriptUtils.90a1f4c8.chunk.js","mappings":"sKACA,EAA4B,mCAA5B,EAAgI,mC,qBCInHA,EAAqC,CAChD,CACEC,MAAO,gBACPC,KAAM,6CACNC,KAAK,mdAiBP,CACEF,MAAO,iBACPC,KAAM,6CACNC,KAAK,gWAeP,CACEF,MAAO,iBACPC,KAAM,6CACNC,KAAK,qgBAkBP,CACEF,MAAO,mBACPC,KAAM,uEACNC,KAAK,sXAcP,CACEF,MAAO,0BACPC,KAAM,8EACNC,KAAK,+RAYP,CACEF,MAAO,mBACPC,KAAM,uEACNC,KAAK,wWAcP,CACEF,MAAO,qBACPC,KAAM,oFACNC,KAAK,g5BA+BP,CACEF,MAAO,mBACPC,KAAM,0CACNC,KAAK,gdAYP,CACEF,MAAO,mBACPC,KAAM,yDACNC,KAAK,oZAYP,CACEF,MAAO,oBACPC,KAAM,mEACNC,KAAK,mQ,4CCxJT,EApBwB,WACtB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAiBC,UAC/BH,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,CACjBC,KAAM,kBACJC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAJ,SAAA,EACEG,EAAAA,EAAAA,MAACE,EAAAA,EAAI,CAACC,MAAO,CAAEC,UAAW,UAAYC,QAAS,OAAQC,QAAQ,KAAIT,SAAA,CAAC,iBAElEH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,OAEjBN,EAAciB,KAAI,SAACC,GAAG,OACrBd,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CAAiBC,KAAMF,GAAjBA,EAAIjB,MAAoB,MAE5C,EAELoB,MAAO,kBAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAOC,EAAAA,EAAAA,IAAcxB,IAAkB,KAItE,C","sources":["webpack://dev-tools/./src/Components/TypeScriptUtils/TypeScriptUtils.module.css?f962","Constant/TSUtils.ts","Components/TypeScriptUtils/TypeScriptUtils.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TypeScriptUtils_container__12Yjd\",\"subContainer\":\"TypeScriptUtils_subContainer__nmpf4\",\"separator\":\"TypeScriptUtils_separator__gMmYC\"};","export interface IUtilsDescription {\n  title: string;\n  desc: string;\n  code: string;\n}\nexport const utilsExamples: IUtilsDescription[] = [\n  {\n    title: 'Partial<Type>',\n    desc: 'Make all properties of an object optional.',\n    code: `\n  interface User {\n    id: number;\n    name: string;\n    email: string;\n  }\n  \n  function updateUser(user: User, updates: Partial<User>): User {\n    return { ...user, ...updates };\n  }\n  \n  const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n  const updates = { name: 'Alice Smith' };\n  const updatedUser = updateUser(user, updates);\n  console.log(updatedUser); // { id: 1, name: 'Alice Smith', email: 'alice@example.com' }\n  `,\n  },\n  {\n    title: 'Readonly<Type>',\n    desc: 'Make all properties of an object readonly.',\n    code: `\n  interface User {\n    readonly id: number;\n    name: string;\n    email: string;\n  }\n  \n  function getUserById(id: number): Readonly<User> {\n    return { id, name: 'Alice', email: 'alice@example.com' };\n  }\n  \n  const user = getUserById(1);\n  user.name = 'Bob'; // Error: Cannot assign to 'name' because it is a read-only property.\n  `,\n  },\n  {\n    title: 'Required<Type>',\n    desc: 'Make all properties of an object required.',\n    code: `\n    interface User {\n      id?: number;\n      name?: string;\n      email?: string;\n    }\n    \n    function createUser(user: Required<User>): void {\n      console.log(user.id, user.name, user.email);\n    }\n    \n    const user = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    createUser(user); // OK\n    \n    const incompleteUser = { name: 'Bob' };\n    createUser(incompleteUser); // Error: Property 'id' is missing in type '{ name: string; }' but required in type 'Required<User>'.\n    `,\n  },\n  {\n    title: 'Pick<Type, Keys>',\n    desc: 'Create a type containing a subset of the properties of another type.',\n    code: `\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Pick<User, 'id' | 'name' | 'email'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    `,\n  },\n  {\n    title: 'Exclude<Type, Excluded>',\n    desc: 'Exclude from a type all properties that are assignable to a specified type.',\n    code: `\n    type Pet = 'cat' | 'dog' | 'bird';\n    type Wild = 'lion' | 'tiger' | 'bear';\n    type Animals = Pet | Wild;\n    \n    type Domestic = Exclude<Animals, Wild>;\n    \n    const pets: Domestic[] = ['cat', 'dog', 'bird'];\n    console.log(pets); // ['cat', 'dog', 'bird']\n    `,\n  },\n\n  {\n    title: 'Omit<Type, Keys>',\n    desc: 'Create a type that omits a subset of the properties of another type.',\n    code: `\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Omit<User, 'isAdmin'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    `,\n  },\n  {\n    title: 'Record<Keys, Type>',\n    desc: 'Create a type with a set of properties as keys and a specified type as the value.',\n    code: `\n    type Animal = 'cat' | 'dog' | 'bird';\n    type Sound = 'meow' | 'woof' | 'tweet';\n    \n    type Sounds = Record<Animal, Sound>;\n    \n    const sounds: Sounds = {\n      cat: 'meow',\n      dog: 'woof',\n      bird: 'tweet',\n    };\n    \n    console.log(sounds); // { cat: 'meow', dog: 'woof', bird: 'tweet' }\n\n    //use key as type property\n\n    interface Book {\n        title: string;\n        author: string;\n      }\n      \n      const books: Record<string, Book> = {\n        '978-1408894624': { title: 'Harry Potter and the Philosopher's Stone', author: 'J.K. Rowling' },\n        '978-0316015844': { title: 'Twilight', author: 'Stephenie Meyer' },\n        '978-1501175466': { title: 'The Handmaid's Tale', author: 'Margaret Atwood' },\n      };\n      \n      const book = books['978-1408894624'];\n      console.log(book.title); // 'Harry Potter and the Philosopher's Stone'\n    `,\n  },\n  {\n    title: 'ReturnType<Type>',\n    desc: 'Get the return type of a function type.',\n    code: `\n        function getUser(id: number): { id: number; name: string; email: string } {\n          // Implementation omitted for brevity.\n          return { id, name: 'Alice', email: 'alice@example.com' };\n        }\n        \n        type User = ReturnType<typeof getUser>;\n        \n        const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n        console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n        `,\n  },\n  {\n    title: 'Parameters<Type>',\n    desc: 'Get the parameter types of a function type as a tuple.',\n    code: `\n    function createUser(name: string, email: string): { id: number; name: string; email: string } {\n      // Implementation omitted for brevity.\n      return { id: 1, name, email };\n    }\n    \n    type CreateUserParams = Parameters<typeof createUser>;\n    \n    const params: CreateUserParams = ['Alice', 'alice@example.com'];\n    console.log(params); // ['Alice', 'alice@example.com']\n    `,\n  },\n  {\n    title: 'NonNullable<Type>',\n    desc: 'Create a type that removes null and undefined from a union type.',\n    code: `\n    type User = { id: number; name: string; email?: string } | null | undefined;\n    type NonNullableUser = NonNullable<User>;\n    \n    const user: NonNullableUser = { id: 1, name: 'Alice' };\n    console.log(user); // { id: 1, name: 'Alice' }\n    `,\n  },\n];\n","import React from 'react';\nimport styles from './TypeScriptUtils.module.css';\nimport { HookListItem } from '../HooksList/HookListItem';\nimport { Text } from '../Text';\nimport { utilsExamples } from '../../Constant/TSUtils';\nimport { SideMenu } from '../SideMenu';\nimport { LayoutWithSideMenu } from '../LayoutWithSideMenu';\nimport { extractTitles } from '../../Helpers/Json';\n\nconst TypeScriptUtils = () => {\n  return (\n    <div className={styles.container}>\n      <LayoutWithSideMenu\n        Left={() => (\n          <>\n            <Text style={{ alignSelf: 'center' }} padding={'25px'} variant=\"h6\">\n              Utility Types\n              <div className={styles.separator} />\n            </Text>\n            {utilsExamples.map((val) => (\n              <HookListItem key={val.title} item={val} />\n            ))}\n          </>\n        )}\n        Right={() => <SideMenu items={extractTitles(utilsExamples)} />}\n      />\n    </div>\n  );\n};\nexport default TypeScriptUtils;\n"],"names":["utilsExamples","title","desc","code","_jsx","className","styles","children","LayoutWithSideMenu","Left","_jsxs","_Fragment","Text","style","alignSelf","padding","variant","map","val","HookListItem","item","Right","SideMenu","items","extractTitles"],"sourceRoot":""}