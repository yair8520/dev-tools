"use strict";(self.webpackChunkdev_tools=self.webpackChunkdev_tools||[]).push([[733],{80912:(e,n,t)=>{t.r(n),t.d(n,{default:()=>y});t(72791);const o="TypeScriptUtils_container__pF-RP",a="TypeScriptUtils_separator__ueX9q";var r=t(62440),s=t(19028);const i=[{title:"as const ",desc:"Preserve literal types, type inference, and use as an alternative to enums.",code:"\n  // Define routes with 'as const' for literal types\n  const routes = {\n    home: '/',\n    admin: '/admin',\n    users: '/users',\n  } as const;\n\n  // Infer the type of 'routes' object\n  type TypeOfRoutes = typeof routes;\n\n  // Function to navigate to a specific route\n  const goToRoute = (route: TypeOfRoutes[keyof TypeOfRoutes]) => {\n    console.log('Navigating to:', route);\n    // Actual navigation logic goes here\n  };\n\n  // Call the 'goToRoute' function\n  goToRoute(routes.admin); // Navigating to: /admin\n  goToRoute(routes.users); // Navigating to: /users\n\n  // 'as const' preserves literal types, providing type safety\n  // Similar effect to enums but with more flexibility\n  // TypeOfRoutes is inferred as:\n  // type TypeOfRoutes = {\n  //   readonly home: \"/\";\n  //   readonly admin: \"/admin\";\n  //   readonly users: \"/users\";\n  // };\n  "},{title:"keyof & typeof",desc:"Explore the basics of TypeScript's keyof and typeof operators through a practical example showcasing secure property access and value assignment.",code:"\n      // Define an object\n      const car = {\n        make: 'Toyota',\n        model: 'Camry',\n        year: 2022,\n      } as const;\n  \n      // Access a property using keyof and typeof\n      type CarKey = keyof typeof car; // Type: 'make' | 'model' | 'year'\n      type CarProperty = typeof car[CarKey]; // Type: 'Toyota' | 'Camry' | 2022\n  \n      // Usage\n      const carKey: CarKey = 'make'; // Allowed values: 'make', 'model', 'year'\n      const carProperty: CarProperty = car[carKey]; // Type inference based on carKey\n  \n      console.log('Car Property:', carProperty);\n      "},{title:"Extending keyof & typeof",desc:"Learn how to safely extend an object's properties while maintaining type safety using TypeScript's keyof and typeof operators.",code:"\n      // Base object\n      const basePerson = {\n        name: 'Alice',\n        age: 30,\n      } as const;\n  \n      // Extending the base object\n      const extendedPerson = {\n        ...basePerson,\n        city: 'Wonderland',\n      } as const;\n  \n      // Utility function to access property from object\n      function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {\n        return obj[key];\n      }\n  \n      // Usage\n      const name = getProperty(extendedPerson, 'name'); // Type: 'Alice'\n      const age = getProperty(extendedPerson, 'age');   // Type: 30\n      const city = getProperty(extendedPerson, 'city'); // Type: 'Wonderland'\n  \n      console.log('Name:', name);\n      console.log('Age:', age);\n      console.log('City:', city);\n      "},{title:"Partial<Type>",desc:"Make all properties of an object optional.",code:"\n  interface User {\n    id: number;\n    name: string;\n    email: string;\n  }\n  \n  function updateUser(user: User, updates: Partial<User>): User {\n    return { ...user, ...updates };\n  }\n  \n  const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n  const updates = { name: 'Alice Smith' };\n  const updatedUser = updateUser(user, updates);\n  console.log(updatedUser); // { id: 1, name: 'Alice Smith', email: 'alice@example.com' }\n  "},{title:"Readonly<Type>",desc:"Make all properties of an object readonly.",code:"\n  interface User {\n    readonly id: number;\n    name: string;\n    email: string;\n  }\n  \n  function getUserById(id: number): Readonly<User> {\n    return { id, name: 'Alice', email: 'alice@example.com' };\n  }\n  \n  const user = getUserById(1);\n  user.name = 'Bob'; // Error: Cannot assign to 'name' because it is a read-only property.\n  "},{title:"Required<Type>",desc:"Make all properties of an object required.",code:"\n    interface User {\n      id?: number;\n      name?: string;\n      email?: string;\n    }\n    \n    function createUser(user: Required<User>): void {\n      console.log(user.id, user.name, user.email);\n    }\n    \n    const user = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    createUser(user); // OK\n    \n    const incompleteUser = { name: 'Bob' };\n    createUser(incompleteUser); // Error: Property 'id' is missing in type '{ name: string; }' but required in type 'Required<User>'.\n    "},{title:"Pick<Type, Keys>",desc:"Create a type containing a subset of the properties of another type.",code:"\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Pick<User, 'id' | 'name' | 'email'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    "},{title:"Exclude<Type, Excluded>",desc:"Exclude from a type all properties that are assignable to a specified type.",code:"\n    type Pet = 'cat' | 'dog' | 'bird';\n    type Wild = 'lion' | 'tiger' | 'bear';\n    type Animals = Pet | Wild;\n    \n    type Domestic = Exclude<Animals, Wild>;\n    \n    const pets: Domestic[] = ['cat', 'dog', 'bird'];\n    console.log(pets); // ['cat', 'dog', 'bird']\n    "},{title:"Omit<Type, Keys>",desc:"Create a type that omits a subset of the properties of another type.",code:"\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Omit<User, 'isAdmin'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    "},{title:"Record<Keys, Type>",desc:"Create a type with a set of properties as keys and a specified type as the value.",code:"\n    type Animal = 'cat' | 'dog' | 'bird';\n    type Sound = 'meow' | 'woof' | 'tweet';\n    \n    type Sounds = Record<Animal, Sound>;\n    \n    const sounds: Sounds = {\n      cat: 'meow',\n      dog: 'woof',\n      bird: 'tweet',\n    };\n    \n    console.log(sounds); // { cat: 'meow', dog: 'woof', bird: 'tweet' }\n\n    //use key as type property\n\n    interface Book {\n        title: string;\n        author: string;\n      }\n      \n      const books: Record<string, Book> = {\n        '978-1408894624': { title: 'Harry Potter and the Philosopher's Stone', author: 'J.K. Rowling' },\n        '978-0316015844': { title: 'Twilight', author: 'Stephenie Meyer' },\n        '978-1501175466': { title: 'The Handmaid's Tale', author: 'Margaret Atwood' },\n      };\n      \n      const book = books['978-1408894624'];\n      console.log(book.title); // 'Harry Potter and the Philosopher's Stone'\n    "},{title:"ReturnType<Type>",desc:"Get the return type of a function type.",code:"\n        function getUser(id: number): { id: number; name: string; email: string } {\n          // Implementation omitted for brevity.\n          return { id, name: 'Alice', email: 'alice@example.com' };\n        }\n        \n        type User = ReturnType<typeof getUser>;\n        \n        const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n        console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n        "},{title:"Parameters<Type>",desc:"Get the parameter types of a function type as a tuple.",code:"\n    function createUser(name: string, email: string): { id: number; name: string; email: string } {\n      // Implementation omitted for brevity.\n      return { id: 1, name, email };\n    }\n    \n    type CreateUserParams = Parameters<typeof createUser>;\n    \n    const params: CreateUserParams = ['Alice', 'alice@example.com'];\n    console.log(params); // ['Alice', 'alice@example.com']\n    "},{title:"NonNullable<Type>",desc:"Create a type that removes null and undefined from a union type.",code:"\n    type User = { id: number; name: string; email?: string } | null | undefined;\n    type NonNullableUser = NonNullable<User>;\n    \n    const user: NonNullableUser = { id: 1, name: 'Alice' };\n    console.log(user); // { id: 1, name: 'Alice' }\n    "}];var l=t(38674),c=t(92344),d=t(60712),p=t(21486),m=t(80184);const y=()=>{const e=(0,p.E)();return(0,m.jsx)("div",{className:o,children:(0,m.jsx)(c.W,{Left:()=>(0,m.jsxs)(m.Fragment,{children:[(0,m.jsxs)(s.x,{style:{alignSelf:"center"},padding:"25px",variant:"h6",children:["Utility Types",(0,m.jsx)("div",{className:a})]}),i.map((n=>(0,m.jsx)(r.U,{active:e===n.title,item:n},n.title)))]}),Right:()=>(0,m.jsx)(l.f,{items:(0,d.$9)(i)})})})}}}]);
//# sourceMappingURL=TypeScriptUtils.010aae10.chunk.js.map