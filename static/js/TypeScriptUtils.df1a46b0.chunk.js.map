{"version":3,"file":"static/js/TypeScriptUtils.df1a46b0.chunk.js","mappings":"oKACA,EAA4B,mCAA5B,EAAgI,mC,oBCInHA,EAAqC,CAChD,CACEC,MAAO,gBACPC,KAAM,6CACNC,KAAK,mdAiBP,CACEF,MAAO,iBACPC,KAAM,6CACNC,KAAK,gWAeP,CACEF,MAAO,iBACPC,KAAM,6CACNC,KAAK,qgBAkBP,CACEF,MAAO,mBACPC,KAAM,uEACNC,KAAK,sXAcP,CACEF,MAAO,0BACPC,KAAM,8EACNC,KAAK,+RAYP,CACEF,MAAO,mBACPC,KAAM,uEACNC,KAAK,wWAcP,CACEF,MAAO,qBACPC,KAAM,oFACNC,KAAK,g5BA+BP,CACEF,MAAO,mBACPC,KAAM,0CACNC,KAAK,gdAYP,CACEF,MAAO,mBACPC,KAAM,yDACNC,KAAK,oZAYP,CACEF,MAAO,oBACPC,KAAM,mEACNC,KAAK,mQ,sCCxJT,EApBwB,WACtB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAiBC,UAC/BH,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,CACjBC,KAAM,kBACJC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAJ,SAAA,EACEG,EAAAA,EAAAA,MAACE,EAAAA,EAAI,CAACC,MAAO,CAAEC,UAAW,UAAYC,QAAS,OAAQC,QAAQ,KAAIT,SAAA,CAAC,iBAElEH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,OAEjBN,EAAciB,KAAI,SAACC,GAAG,OACrBd,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CAAiBC,KAAMF,GAAjBA,EAAIjB,MAAoB,MAE5C,EAELoB,MAAO,kBAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAOC,EAAAA,EAAAA,IAAcxB,IAAkB,KAItE,C","sources":["webpack://dev-tools/./src/Components/TypeScriptUtils/TypeScriptUtils.module.css?0d5a","Constant/TSUtils.ts","Components/TypeScriptUtils/TypeScriptUtils.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TypeScriptUtils_container__Fq0m4\",\"subContainer\":\"TypeScriptUtils_subContainer__jmC0M\",\"separator\":\"TypeScriptUtils_separator__3Qgwb\"};","export interface IUtilsDescription {\r\n  title: string;\r\n  desc: string;\r\n  code: string;\r\n}\r\nexport const utilsExamples: IUtilsDescription[] = [\r\n  {\r\n    title: 'Partial<Type>',\r\n    desc: 'Make all properties of an object optional.',\r\n    code: `\r\n  interface User {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n  }\r\n  \r\n  function updateUser(user: User, updates: Partial<User>): User {\r\n    return { ...user, ...updates };\r\n  }\r\n  \r\n  const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\r\n  const updates = { name: 'Alice Smith' };\r\n  const updatedUser = updateUser(user, updates);\r\n  console.log(updatedUser); // { id: 1, name: 'Alice Smith', email: 'alice@example.com' }\r\n  `,\r\n  },\r\n  {\r\n    title: 'Readonly<Type>',\r\n    desc: 'Make all properties of an object readonly.',\r\n    code: `\r\n  interface User {\r\n    readonly id: number;\r\n    name: string;\r\n    email: string;\r\n  }\r\n  \r\n  function getUserById(id: number): Readonly<User> {\r\n    return { id, name: 'Alice', email: 'alice@example.com' };\r\n  }\r\n  \r\n  const user = getUserById(1);\r\n  user.name = 'Bob'; // Error: Cannot assign to 'name' because it is a read-only property.\r\n  `,\r\n  },\r\n  {\r\n    title: 'Required<Type>',\r\n    desc: 'Make all properties of an object required.',\r\n    code: `\r\n    interface User {\r\n      id?: number;\r\n      name?: string;\r\n      email?: string;\r\n    }\r\n    \r\n    function createUser(user: Required<User>): void {\r\n      console.log(user.id, user.name, user.email);\r\n    }\r\n    \r\n    const user = { id: 1, name: 'Alice', email: 'alice@example.com' };\r\n    createUser(user); // OK\r\n    \r\n    const incompleteUser = { name: 'Bob' };\r\n    createUser(incompleteUser); // Error: Property 'id' is missing in type '{ name: string; }' but required in type 'Required<User>'.\r\n    `,\r\n  },\r\n  {\r\n    title: 'Pick<Type, Keys>',\r\n    desc: 'Create a type containing a subset of the properties of another type.',\r\n    code: `\r\n    interface User {\r\n      id: number;\r\n      name: string;\r\n      email: string;\r\n      isAdmin: boolean;\r\n    }\r\n    \r\n    type UserWithoutAdmin = Pick<User, 'id' | 'name' | 'email'>;\r\n    \r\n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\r\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\r\n    `,\r\n  },\r\n  {\r\n    title: 'Exclude<Type, Excluded>',\r\n    desc: 'Exclude from a type all properties that are assignable to a specified type.',\r\n    code: `\r\n    type Pet = 'cat' | 'dog' | 'bird';\r\n    type Wild = 'lion' | 'tiger' | 'bear';\r\n    type Animals = Pet | Wild;\r\n    \r\n    type Domestic = Exclude<Animals, Wild>;\r\n    \r\n    const pets: Domestic[] = ['cat', 'dog', 'bird'];\r\n    console.log(pets); // ['cat', 'dog', 'bird']\r\n    `,\r\n  },\r\n\r\n  {\r\n    title: 'Omit<Type, Keys>',\r\n    desc: 'Create a type that omits a subset of the properties of another type.',\r\n    code: `\r\n    interface User {\r\n      id: number;\r\n      name: string;\r\n      email: string;\r\n      isAdmin: boolean;\r\n    }\r\n    \r\n    type UserWithoutAdmin = Omit<User, 'isAdmin'>;\r\n    \r\n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\r\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\r\n    `,\r\n  },\r\n  {\r\n    title: 'Record<Keys, Type>',\r\n    desc: 'Create a type with a set of properties as keys and a specified type as the value.',\r\n    code: `\r\n    type Animal = 'cat' | 'dog' | 'bird';\r\n    type Sound = 'meow' | 'woof' | 'tweet';\r\n    \r\n    type Sounds = Record<Animal, Sound>;\r\n    \r\n    const sounds: Sounds = {\r\n      cat: 'meow',\r\n      dog: 'woof',\r\n      bird: 'tweet',\r\n    };\r\n    \r\n    console.log(sounds); // { cat: 'meow', dog: 'woof', bird: 'tweet' }\r\n\r\n    //use key as type property\r\n\r\n    interface Book {\r\n        title: string;\r\n        author: string;\r\n      }\r\n      \r\n      const books: Record<string, Book> = {\r\n        '978-1408894624': { title: 'Harry Potter and the Philosopher's Stone', author: 'J.K. Rowling' },\r\n        '978-0316015844': { title: 'Twilight', author: 'Stephenie Meyer' },\r\n        '978-1501175466': { title: 'The Handmaid's Tale', author: 'Margaret Atwood' },\r\n      };\r\n      \r\n      const book = books['978-1408894624'];\r\n      console.log(book.title); // 'Harry Potter and the Philosopher's Stone'\r\n    `,\r\n  },\r\n  {\r\n    title: 'ReturnType<Type>',\r\n    desc: 'Get the return type of a function type.',\r\n    code: `\r\n        function getUser(id: number): { id: number; name: string; email: string } {\r\n          // Implementation omitted for brevity.\r\n          return { id, name: 'Alice', email: 'alice@example.com' };\r\n        }\r\n        \r\n        type User = ReturnType<typeof getUser>;\r\n        \r\n        const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\r\n        console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\r\n        `,\r\n  },\r\n  {\r\n    title: 'Parameters<Type>',\r\n    desc: 'Get the parameter types of a function type as a tuple.',\r\n    code: `\r\n    function createUser(name: string, email: string): { id: number; name: string; email: string } {\r\n      // Implementation omitted for brevity.\r\n      return { id: 1, name, email };\r\n    }\r\n    \r\n    type CreateUserParams = Parameters<typeof createUser>;\r\n    \r\n    const params: CreateUserParams = ['Alice', 'alice@example.com'];\r\n    console.log(params); // ['Alice', 'alice@example.com']\r\n    `,\r\n  },\r\n  {\r\n    title: 'NonNullable<Type>',\r\n    desc: 'Create a type that removes null and undefined from a union type.',\r\n    code: `\r\n    type User = { id: number; name: string; email?: string } | null | undefined;\r\n    type NonNullableUser = NonNullable<User>;\r\n    \r\n    const user: NonNullableUser = { id: 1, name: 'Alice' };\r\n    console.log(user); // { id: 1, name: 'Alice' }\r\n    `,\r\n  },\r\n];\r\n","import React from 'react';\r\nimport styles from './TypeScriptUtils.module.css';\r\nimport { HookListItem } from '../HooksList/HookListItem';\r\nimport { Text } from '../Text';\r\nimport { utilsExamples } from '../../Constant/TSUtils';\r\nimport { SideMenu } from '../SideMenu';\r\nimport { LayoutWithSideMenu } from '../LayoutWithSideMenu';\r\nimport { extractTitles } from '../../Helpers/Json';\r\n\r\nconst TypeScriptUtils = () => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <LayoutWithSideMenu\r\n        Left={() => (\r\n          <>\r\n            <Text style={{ alignSelf: 'center' }} padding={'25px'} variant=\"h6\">\r\n              Utility Types\r\n              <div className={styles.separator} />\r\n            </Text>\r\n            {utilsExamples.map((val) => (\r\n              <HookListItem key={val.title} item={val} />\r\n            ))}\r\n          </>\r\n        )}\r\n        Right={() => <SideMenu items={extractTitles(utilsExamples)} />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default TypeScriptUtils;\r\n"],"names":["utilsExamples","title","desc","code","_jsx","className","styles","children","LayoutWithSideMenu","Left","_jsxs","_Fragment","Text","style","alignSelf","padding","variant","map","val","HookListItem","item","Right","SideMenu","items","extractTitles"],"sourceRoot":""}