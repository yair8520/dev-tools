{"version":3,"file":"static/js/DiffChecker.f6bbdb26.chunk.js","mappings":"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","sources":["webpack://dev-tools/./src/Components/DiffChecker/DiffChecker.module.css?7b9a","Components/DiffContainer/DiffContainer.tsx","Components/DiffChecker/DiffChecker.tsx","webpack://dev-tools/./src/Components/DiffChecker/InputButtons/InputButtons.module.css?2797","Components/InputPropsEditor/InputPropsEditor.tsx","Components/DiffChecker/InputButtons/InputButtons.tsx","Helpers/Clipboard.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DiffChecker_container__iVQnA\",\"enter\":\"DiffChecker_enter__Da6mX\",\"text\":\"DiffChecker_text__DyMxk\",\"inputs\":\"DiffChecker_inputs__vOwsE\",\"separator\":\"DiffChecker_separator__e4-sR\",\"input\":\"DiffChecker_input__pzwqU\",\"inputContainer\":\"DiffChecker_inputContainer__hMfEq\"};","import React, { useContext } from 'react';\nimport './DiffContainer.module.css';\nimport { DiffContainerProps } from './DiffContainerProps';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport { AppContext } from '../../Context/ThemeContext/ThemeContext';\n\nexport const DiffContainer = ({ original, changed }: DiffContainerProps) => {\n  const { isDark } = useContext(AppContext);\n\n  return (\n    <div style={{ maxWidth: '100vw', overflow: 'auto' }}>\n      <ReactDiffViewer\n        useDarkTheme={isDark}\n        rightTitle={'Changed'}\n        leftTitle={'Original'}\n        oldValue={original}\n        newValue={changed}\n        splitView={true}\n        showDiffOnly={false}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport styles from './DiffChecker.module.css';\nimport { DiffContainer } from '../DiffContainer';\nimport { MultiLineInput } from '../MultiLineInput';\nimport { Text } from '../Text';\nimport { InputButtons } from './InputButtons';\n\nconst DiffChecker = () => {\n  const [original, setOriginal] = useState<string>('');\n  const [changed, setChanged] = useState<string>('');\n  return (\n    <div className={styles.container}>\n      <Text\n        style={{ alignSelf: 'center', textAlign: 'center' }}\n        padding={'25px'}\n        variant=\"h6\"\n      >\n        Diff Checker\n        <div className={styles.separator} />\n      </Text>\n\n      <div className={styles.inputs}>\n        <div className={styles.inputContainer}>\n          <MultiLineInput\n            className={styles.input}\n            minRows={15}\n            maxRows={20}\n            placeholder={'Original'}\n            value={original}\n            onChange={setOriginal}\n            InputProps={{\n              endAdornment: (\n                <InputButtons\n                  type={'Original'}\n                  value={original}\n                  onChange={setOriginal}\n                />\n              ),\n            }}\n          />\n        </div>\n        <div className={styles.inputContainer}>\n          <MultiLineInput\n            className={styles.input}\n            minRows={15}\n            maxRows={20}\n            placeholder={'Changed'}\n            value={changed}\n            onChange={setChanged}\n            InputProps={{\n              endAdornment: (\n                <InputButtons\n                  type={'Changed'}\n                  value={changed}\n                  onChange={setChanged}\n                />\n              ),\n            }}\n          />\n        </div>\n      </div>\n      <DiffContainer original={original} changed={changed} />\n    </div>\n  );\n};\nexport default DiffChecker;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"InputButtons_container__bHQ8e\"};","import React from 'react';\nimport styles from './InputPropsEditor.module.css';\nimport { InputPropsEditorProps } from './InputPropsEditorProps';\nimport { CIconButton } from '../CIconButton';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nexport const InputPropsEditor = ({\n  multiLineInputRef,\n}: InputPropsEditorProps) => {\n  const handleAlignRightClick = () => {\n    if (multiLineInputRef && multiLineInputRef.current) {\n      multiLineInputRef.current.style.textAlign = 'right';\n    }\n  };\n\n  const handleAlignLeftClick = () => {\n    if (multiLineInputRef && multiLineInputRef.current) {\n      multiLineInputRef.current.style.textAlign = 'left';\n    }\n  };\n\n  const handleAlignCenterClick = () => {\n    if (multiLineInputRef && multiLineInputRef.current) {\n      multiLineInputRef.current.style.textAlign = 'center';\n    }\n  };\n\n  return (\n    <>\n      <CIconButton onClick={handleAlignRightClick}>\n        <FormatAlignRightIcon />\n      </CIconButton>\n      <CIconButton onClick={handleAlignLeftClick}>\n        <FormatAlignLeftIcon />\n      </CIconButton>\n      <CIconButton onClick={handleAlignCenterClick}>\n        <FormatAlignCenterIcon />\n      </CIconButton>\n    </>\n  );\n};\n","import React from 'react';\nimport styles from './InputButtons.module.css';\nimport { InputButtonsProps } from './InputButtonsProps';\nimport { IconButton, InputAdornment } from '@mui/material';\nimport { Description } from '@material-ui/icons';\nimport {\n  handleCopy,\n  handleFile,\n  handlePaste,\n} from '../../../Helpers/Clipboard';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport { CIconButton } from '../../CIconButton';\nimport { InputPropsEditor } from '../../InputPropsEditor';\nimport ContentPasteIcon from '@mui/icons-material/ContentPaste';\nexport const InputButtons = ({\n  onChange,\n  value,\n  type,\n  withFile = true,\n  editor = false,\n  multiLineInputRef,\n}: InputButtonsProps) => {\n  return (\n    <InputAdornment className={styles.container} position=\"end\">\n      <CIconButton\n        placement=\"right\"\n        title={'Copy'}\n        onClick={() => handleCopy(value)}\n      >\n        <ContentCopyIcon />\n      </CIconButton>\n      <CIconButton\n        placement=\"left\"\n        title={'Paste'}\n        onClick={() => handlePaste(onChange)}\n      >\n        <ContentPasteIcon />\n      </CIconButton>\n      <CIconButton\n        placement=\"right\"\n        title={'Delete'}\n        onClick={() => onChange('')}\n      >\n        <DeleteIcon />\n      </CIconButton>\n      {withFile && (\n        <IconButton onClick={() => {}}>\n          <input\n            type=\"file\"\n            accept=\".txt,.json\"\n            id={`fileInput${type}`}\n            onChange={(e) => handleFile(e, onChange)}\n            style={{ display: 'none' }}\n          />\n          <label htmlFor={`fileInput${type}`}>\n            <Description />\n          </label>\n        </IconButton>\n      )}\n      {editor && <InputPropsEditor multiLineInputRef={multiLineInputRef} />}\n    </InputAdornment>\n  );\n};\n","export const handlePaste = (setValue: (t: string) => void) => {\n  navigator.clipboard.readText().then((text = \"\") => {\n\n    setValue(text)\n  });\n};\nexport const handleCopy = (t: string) => {\n  navigator.clipboard\n    .writeText(t)\n    .then(() => {\n      console.log('Text copied to clipboard');\n    })\n    .catch((err) => {\n      console.error('Error copying text to clipboard:', err);\n    });\n};\nexport const handleFile = (\n  e: { target: { files: any } },\n  onChange: (t: any) => void\n) => {\n  const file = e.target.files?.[0];\n\n  if (file.type === 'application/json' || file.type === 'text/plain') {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result;\n      onChange(content);\n    };\n    reader.readAsText(file);\n  } else {\n    alert('Invalid file type. Only JSON and TXT files are supported.');\n    return;\n  }\n};\n"],"names":["DiffContainer","_ref","original","changed","isDark","useContext","AppContext","_jsx","style","maxWidth","overflow","children","ReactDiffViewer","useDarkTheme","rightTitle","leftTitle","oldValue","newValue","splitView","showDiffOnly","DiffChecker","setOriginal","useState","setChanged","_jsxs","className","styles","Text","alignSelf","textAlign","padding","variant","MultiLineInput","minRows","maxRows","placeholder","value","onChange","InputProps","endAdornment","InputButtons","type","InputPropsEditor","multiLineInputRef","_Fragment","CIconButton","onClick","handleAlignRightClick","current","FormatAlignRightIcon","handleAlignLeftClick","FormatAlignLeftIcon","handleAlignCenterClick","FormatAlignCenterIcon","withFile","editor","InputAdornment","position","placement","title","handleCopy","ContentCopyIcon","handlePaste","ContentPasteIcon","DeleteIcon","IconButton","accept","id","concat","e","handleFile","display","htmlFor","Description","setValue","navigator","clipboard","readText","then","arguments","length","undefined","t","writeText","console","log","catch","err","error","_e$target$files","file","target","files","reader","FileReader","onload","_e$target","content","result","readAsText","alert"],"sourceRoot":""}