"use strict";(self.webpackChunkdev_tools=self.webpackChunkdev_tools||[]).push([[185],{46217:function(e,n,t){var i=t(8081),r=t.n(i),a=t(23645),o=t.n(a)()(r());o.push([e.id,".J37qyIOJcjJXmf_ptHwa {\n  width: 100%;\n  display: flex;\n\n  flex-direction: column;\n}\n.cTSZYX2WZwMffEWP2jnY {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-around;\n}\n.DUcAYAXeHGpJFvE0g3N7 {\n  border: 2px solid #f0f0f0;\n  width: 100%;\n}\n",""]),o.locals={container:"J37qyIOJcjJXmf_ptHwa",subContainer:"cTSZYX2WZwMffEWP2jnY",separator:"DUcAYAXeHGpJFvE0g3N7"},n.Z=o},19185:function(e,n,t){t.r(n),t.d(n,{default:function(){return j}});var i=t(85893),r=(t(87363),t(93379)),a=t.n(r),o=t(7795),s=t.n(o),l=t(90569),c=t.n(l),d=t(3565),m=t.n(d),p=t(19216),u=t.n(p),y=t(44589),f=t.n(y),g=t(46217),b={};b.styleTagTransform=f(),b.setAttributes=m(),b.insert=c().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=u(),a()(g.Z,b);var h=g.Z&&g.Z.locals?g.Z.locals:void 0,U=t(60948),A=t(83218),x=[{title:"Partial<Type>",desc:"Make all properties of an object optional.",code:"\n  interface User {\n    id: number;\n    name: string;\n    email: string;\n  }\n  \n  function updateUser(user: User, updates: Partial<User>): User {\n    return { ...user, ...updates };\n  }\n  \n  const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n  const updates = { name: 'Alice Smith' };\n  const updatedUser = updateUser(user, updates);\n  console.log(updatedUser); // { id: 1, name: 'Alice Smith', email: 'alice@example.com' }\n  "},{title:"Readonly<Type>",desc:"Make all properties of an object readonly.",code:"\n  interface User {\n    readonly id: number;\n    name: string;\n    email: string;\n  }\n  \n  function getUserById(id: number): Readonly<User> {\n    return { id, name: 'Alice', email: 'alice@example.com' };\n  }\n  \n  const user = getUserById(1);\n  user.name = 'Bob'; // Error: Cannot assign to 'name' because it is a read-only property.\n  "},{title:"Required<Type>",desc:"Make all properties of an object required.",code:"\n    interface User {\n      id?: number;\n      name?: string;\n      email?: string;\n    }\n    \n    function createUser(user: Required<User>): void {\n      console.log(user.id, user.name, user.email);\n    }\n    \n    const user = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    createUser(user); // OK\n    \n    const incompleteUser = { name: 'Bob' };\n    createUser(incompleteUser); // Error: Property 'id' is missing in type '{ name: string; }' but required in type 'Required<User>'.\n    "},{title:"Pick<Type, Keys>",desc:"Create a type containing a subset of the properties of another type.",code:"\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Pick<User, 'id' | 'name' | 'email'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    "},{title:"Exclude<Type, Excluded>",desc:"Exclude from a type all properties that are assignable to a specified type.",code:"\n    type Pet = 'cat' | 'dog' | 'bird';\n    type Wild = 'lion' | 'tiger' | 'bear';\n    type Animals = Pet | Wild;\n    \n    type Domestic = Exclude<Animals, Wild>;\n    \n    const pets: Domestic[] = ['cat', 'dog', 'bird'];\n    console.log(pets); // ['cat', 'dog', 'bird']\n    "},{title:"Omit<Type, Keys>",desc:"Create a type that omits a subset of the properties of another type.",code:"\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n      isAdmin: boolean;\n    }\n    \n    type UserWithoutAdmin = Omit<User, 'isAdmin'>;\n    \n    const user: UserWithoutAdmin = { id: 1, name: 'Alice', email: 'alice@example.com' };\n    console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n    "},{title:"Record<Keys, Type>",desc:"Create a type with a set of properties as keys and a specified type as the value.",code:"\n    type Animal = 'cat' | 'dog' | 'bird';\n    type Sound = 'meow' | 'woof' | 'tweet';\n    \n    type Sounds = Record<Animal, Sound>;\n    \n    const sounds: Sounds = {\n      cat: 'meow',\n      dog: 'woof',\n      bird: 'tweet',\n    };\n    \n    console.log(sounds); // { cat: 'meow', dog: 'woof', bird: 'tweet' }\n\n    //use key as type property\n\n    interface Book {\n        title: string;\n        author: string;\n      }\n      \n      const books: Record<string, Book> = {\n        '978-1408894624': { title: 'Harry Potter and the Philosopher's Stone', author: 'J.K. Rowling' },\n        '978-0316015844': { title: 'Twilight', author: 'Stephenie Meyer' },\n        '978-1501175466': { title: 'The Handmaid's Tale', author: 'Margaret Atwood' },\n      };\n      \n      const book = books['978-1408894624'];\n      console.log(book.title); // 'Harry Potter and the Philosopher's Stone'\n    "},{title:"ReturnType<Type>",desc:"Get the return type of a function type.",code:"\n        function getUser(id: number): { id: number; name: string; email: string } {\n          // Implementation omitted for brevity.\n          return { id, name: 'Alice', email: 'alice@example.com' };\n        }\n        \n        type User = ReturnType<typeof getUser>;\n        \n        const user: User = { id: 1, name: 'Alice', email: 'alice@example.com' };\n        console.log(user); // { id: 1, name: 'Alice', email: 'alice@example.com' }\n        "},{title:"Parameters<Type>",desc:"Get the parameter types of a function type as a tuple.",code:"\n    function createUser(name: string, email: string): { id: number; name: string; email: string } {\n      // Implementation omitted for brevity.\n      return { id: 1, name, email };\n    }\n    \n    type CreateUserParams = Parameters<typeof createUser>;\n    \n    const params: CreateUserParams = ['Alice', 'alice@example.com'];\n    console.log(params); // ['Alice', 'alice@example.com']\n    "},{title:"NonNullable<Type>",desc:"Create a type that removes null and undefined from a union type.",code:"\n    type User = { id: number; name: string; email?: string } | null | undefined;\n    type NonNullableUser = NonNullable<User>;\n    \n    const user: NonNullableUser = { id: 1, name: 'Alice' };\n    console.log(user); // { id: 1, name: 'Alice' }\n    "}],w=t(61387),T=t(33329),P=t(16923),v=function(){return v=Object.assign||function(e){for(var n,t=1,i=arguments.length;t<i;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},v.apply(this,arguments)},j=function(){return(0,i.jsx)("div",v({className:h.container},{children:(0,i.jsx)(T.W,{Left:function(){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(A.x,v({style:{alignSelf:"center"},padding:"25px",variant:"h6"},{children:["Utility Types",(0,i.jsx)("div",{className:h.separator})]})),x.map((function(e){return(0,i.jsx)(U.U,{item:e},e.title)}))]})},Right:function(){return(0,i.jsx)(w.f,{items:(0,P.$9)(x)})}})}))}}}]);